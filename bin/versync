#!/usr/bin/env node

"use strict";

const fs = require("fs");
const { ArgumentParser } = require("argparse");
const versync = require("..");
require("colors");

/* eslint-disable no-console */

const ERROR = "[ERROR] ".bold.red;
const SUCCESS = "[OK] ".bold.green;

const parser = new ArgumentParser({
  add_help: true,
  description: "Synchronizes version numbers accross package.json \
and other source files of your choosing.",
});

parser.add_argument("-b", "--bump", {
  help: "Bump the version number in the specified source files. It can take \
one of the following values: \"major\", \"minor\", \"patch\". Or you can \
use \"sync\" to copy the version numbers from package.json to the other files. \
Alternatively you can specify a custom version that is higher than the current \
one. If no value is specified, it defaults to \"patch\".",
  nargs: "?",
});

parser.add_argument("-s", "--sources", {
  help: "Declare the JavaScript files in which the version number will be \
updated. If this option is not used, the list of files is read from the \
package.json \"versionedSources\" property. If the property is not present \
in the package.json and this option is not used, only package.json will be \
synced. Optional.",
});

parser.add_argument("-v", "--verify", {
  help: "Verifies that the sources have the same version number and checks \
whether this version number conforms to the semver specification.",
  action: "store_true",
});

parser.add_argument("-a", "--add", {
  help: "After bumping the version number, run `git add` on the versioned \
files.",
  action: "store_true",
});

parser.add_argument("-t", "--tag", {
  help: "After bumping the version number, commit the changes and create a git \
tag with the current version. (Note that using --add with this flag does \
nothing more than using this flag alone.)",
  action: "store_true",
});

const argv = parser.parse_args();

if (argv.tag && !argv.bump) {
  console.log("The option -t is not valid without -b.");
  parser.printHelp();
  process.exit(1);
}

if (argv.add && !argv.bump) {
  console.log("The option -a is not valid without -b.");
  parser.printHelp();
  process.exit(1);
}

if (!(argv.verify || argv.bump)) {
  console.log("Must specify one of -v or -b.");
  parser.printHelp();
  process.exit(1);
}

if (argv.bump === true) {
  argv.bump = "patch";
}

function existsSync(filePath) {
  try {
    fs.statSync(filePath);
    return true;
  }
  catch (ex) {
    return false;
  }
}

if (!existsSync("package.json")) {
  console.log(
    `${ERROR}No package.json found in the current directory, exiting.`);
  process.exit(1);
}

if (argv.sources) {
  argv.sources = argv.sources.split(",");
}

const runner = new versync.Runner(argv);
runner.onMessage(message => {
  console.log(`${SUCCESS}${message}`);
});

runner.run().catch(err => {
  console.log(`${ERROR}${err.message}`);
  if (err instanceof versync.ExecutionError) {
    console.log(`${ERROR}failed with code: ${err.originalError.code}`);
    console.log(`${ERROR}captured stderr: ${err.stderr}`);
    console.log(`${ERROR}captured stdout: ${err.stdout}`);
  }
  process.exit(1);
});
